// Raw data service definition.
// Defines endpoints of the service fetching data from the Riot API.

syntax = "proto3";

package fetcher.rds;

import "powerspikegg/rawdata/public/constants.proto";
import "powerspikegg/rawdata/public/match.proto";

service MatchFetcher {
    // Update a summoner and returns the list of updated matches
    rpc UpdateSummoner (game.leagueoflegends.Summoner) returns (stream game.leagueoflegends.MatchReference);

    // Get details about a specific match.
    rpc Match (MatchRequest) returns (game.leagueoflegends.MatchReference);

    // Get cached matches based on a query semantic.
    rpc CacheQuery (Query) returns (stream game.leagueoflegends.MatchReference);

    // Get an average statistics based on a query semantic.
    rpc AverageStatistics (Query) returns (AggregatedStatistics);
}

// Message used to request a match to the gRPC endpoint.
message MatchRequest {
    // Id of the requested match. Required.
    int64 id = 1;

    // Region where the match was observed. Required.
    game.leagueoflegends.Region region = 2;
}

// Message used to search matches into the cache of the fetcher.
//
// Query message are used to search into the cache and return matches
// matching the query. At least one element must be specified. If multiple
// elements are specified (such as League and Champion), the query system
// will operate as an AND operator.
message Query {
    // Find matches where a player achieved a specific rank
    //
    // The query system will match matches if at least one player has its
    // highest achieved season tier in this league.
    game.leagueoflegends.League league = 1;

    // Find matches where a player played a specific champion
    //
    // If combined with other selectors (such as League), the selectors
    // will be applied on the summoner playing the champion specified.
    // Since we only fetch draft selection based matches, there are no
    // ambiguities.
    game.leagueoflegends.Champion champion = 2;

    // Find matches where a summoner played
    //
    // TODO(funkysayu): Support this feature
    //
    // If combined with other selectors, the selectors will be applied on
    // this summoner.
    game.leagueoflegends.Summoner summoner = 3;
}

// Message returned by the aggregation pipeline.
//
// Contains all PlayerStatistics' fields that are numeric and can be averaged.
message AggregatedStatistics {
    // match pool is the number of aggregated matches.
    int32 match_pool = 1;

    // aggregated statistics. Note that flags are remained undefined.
    game.leagueoflegends.PlayerStatistics stats = 2;
}
