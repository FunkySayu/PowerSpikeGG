// Match entity definition
//
// Extracted from: https://developer.riotgames.com/api/methods#!/1224/4756
//
// Defines an entity containing all data related to a specific match, from the
// basic informations (such as map, match mod...) to the timeline informations.

syntax = "proto3";

package game.leagueoflegends;

import "powerspikegg/rawdata/public/constants.proto";

// Container of a match, providing its meta data and (optionnaly) its details.
// This message can be used as a result, providing information about a
// match or as a query in order to restrict the matches.
message MatchReference {
     // Match unique identifier.
    double id = 1;

    // Match creation time.
    double timestamp = 2;

    string version = 3;  // Game version
    string plateform_id = 4;  // Plateform ID on which the game was played.
    string region = 5;  // Region where the game was played (NA, EUW...)

    QueueType queue_type = 6;
    Season season = 7;

    // Details of the match.
    MatchDetail detail = 8;
}

// MatchDetail is the root container of match informations.
message MatchDetail {
    // Map on which the match was done.
    Map map = 1;

    // Total duration of the match, in seconds.
    double duration = 2;

    // Team details, containing statistics of the team and of its participants.
    // In case of draft mode, the first team in this list has the first pick
    // turn. This is useful to know in the case you want to re-create the draft
    // phase.
    repeated TeamDetail teams = 3;
}

// TeamDetail contains all the statistics of the team, and the participants
// list.
message TeamDetail {
    // Team identifier used in the timeline informations.
    int32 id = 1;

    // Boolean indicating if the team won the match.
    bool winner = 2;

    // List of bans done by the team.
    // TODO(funkysayu) this should not be IDs, but Champion message.
    repeated int32 banned_champion_ids = 3;

    // Statistics related to the team
    int32 baron_kills = 4;  // Number of time the team killed baron
    int32 dragon_kills = 5;  // Number of time the team killed dragon
    int32 tower_kills = 6;  // Number of tower destroyed by the team
    bool first_baron = 7;  // Did the team get the first baron?
    bool first_dragon = 8;  // Did the team get the first dragon?
    bool first_blood = 9;  // Did the team get the first blood?
    bool first_tower = 10;  // Did the team get the first tower?
    bool first_inhibitor = 11;  // Did the team get the first inhibitor?
    bool first_rift_herald = 12;  // Did the team get the first rift herald?

    // List of participants in the team, containing their statistics.
    repeated Participant participants = 13;
}

// Participant contains all informations related to a player and his
// statistics in the match.
message Participant {
    // Participant identifier used in the timeline informations.
    int32 id = 1;

    // Summoner informations, such as his name or his identifier.
    Summoner summoner = 2;

    // The two following fields are reserved for the runes and masteries.
    // TODO(funkysayu) populate those fields.
    reserved 3, 4;

    // Summoner spells picked, such as Flash or Ghost.
    SummonerSpell summoner_spell_1 = 5;
    SummonerSpell summoner_spell_2 = 6;

    // Generic metrics of the participant.
    // TODO(funkysayu) populate this field.
    reserved 7;

    // Items bought by the player
    repeated Item items = 8;

    // Player statistics at the end of the game.
    PlayerStatistics statistics = 9;
}

// Player statistics at the end of the game.
message PlayerStatistics {
    int32 kills = 1;  // Number of kills
    int32 deaths = 2;  // Number of deaths
    int32 assists = 3;  // Number of assists
    int32 champion_level = 4;  // Champion level achieved

    // Damage metrics
    DamageStatistic magic_damages = 5;
    DamageStatistic physical_damages = 6;
    DamageStatistic true_damages = 7;
    DamageStatistic total_damages = 8;
    int32 total_heal = 9;
    int32 largest_critical_strike = 10;

    // Gold and Minions
    int32 gold_earned = 11;
    int32 gold_spent = 12;
    int32 minions_killed = 13;
    int32 neutral_minions_killed = 14;
    int32 neutral_minions_killed_ennemy_jungle = 15;
    int32 neutral_minions_killed_team_jungle = 16;

    // Vision
    // TODO(funkysayu) since it is not anymore available in the game shop, we
    //                 might remove this statistics soon.
    int32 sight_wards_bought = 17;
    int32 vision_wards_bought = 18;
    int32 wards_placed = 19;
    int32 wards_killed = 20;

    // Multi-kills
    int32 double_kills = 21;
    int32 triple_kills = 22;
    int32 quadra_kills = 23;
    int32 penta_kills = 24;
    int32 unreal_kills = 25;  // Kills after a player got a penta kill
    int32 killing_sprees = 26;  // The number of killing sprees
    int32 largest_killing_spree = 27;
    int32 largest_multi_kill = 28;

    // Objective assistance
    int32 inhibitor_kills = 29;
    int32 tower_kills = 30;
    bool first_blood_assist = 31;
    bool first_blood_kill = 32;
    bool first_inhibitor_kill = 33;
    bool first_tower_assist = 34;
    bool first_tower_kill = 35;
}

// Damage related statistics.
message DamageStatistic {
    int32 total = 1;  // Total damage dealt
    int32 to_champions = 2;  // Damage dealt to champions
    int32 taken = 3;  // Damage taken
}
